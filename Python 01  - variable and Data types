{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64b2a687-0edc-46ff-8fcc-34104fa6c317",
   "metadata": {},
   "outputs": [],
   "source": [
    "#-------------------------------- Python Basics-------------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c22599f3-10e4-4fbd-9cc7-79db9bc5b274",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=10\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1e180271-5842-4895-9e5b-7a13afd49d44",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Variable / object / Identifier\n",
    "# In Python, a variable is used to store a value, which can be a number, string, list, or any other type of data.\n",
    "# You don't need to declare the type of a variable; Python infers it based on the value assigned."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "36877336-23eb-41e0-bd23-dc5082db7ee2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# variable rules\n",
    "# 1] Only A-Z, _ , 0-9 allowed in variable name Symbols are not allower\n",
    "A = 10\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "629c91f4-61e1-481e-9b7b-3f9c806b97d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A10 = 10\n",
    "A10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "56abd659-1752-4c09-a307-6846ef48d7bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A_10 = 10\n",
    "A_10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0bc7b8ff-93af-4bea-a0bc-46037908054c",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (860396930.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[36], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    A@ = 10\u001b[0m\n\u001b[1;37m       ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "A@ = 10     #symbol not allowed\n",
    "A@"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "02014bac-3186-4699-aad6-357b17f9d0e9",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid decimal literal (1102044906.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[26], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    1A = 10\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid decimal literal\n"
     ]
    }
   ],
   "source": [
    "# Rule 2 number not allower in start of name\n",
    "10A = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "87045bef-44b6-4bea-91df-4bdfd8bdd2e9",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'b' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[46], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Rule 3 Variables are coase sensitives \u001b[39;00m\n\u001b[0;32m      2\u001b[0m B \u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m\n\u001b[1;32m----> 3\u001b[0m b\n",
      "\u001b[1;31mNameError\u001b[0m: name 'b' is not defined"
     ]
    }
   ],
   "source": [
    "# Rule 3 Variables are case sensitives \n",
    "B =10\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "75696af2-026b-4e4d-b440-fbafb15ccc14",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2192079926.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[48], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    in = 10\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Rule 4 Python keywords / reserved workds not allowed as name allowed in name but not as name\n",
    "in = 10\n",
    "in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e0ef7b98-89da-4735-a297-467f92992643",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A_in = 10\n",
    "A_in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "3f646ea7-eeac-467a-aa3b-c099829531d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rule 5 no Word or length limit in variable names \n",
    "aaaaaaaaaaaaaaaaaaaaaannnnnnnnnnnnnnnnnnnnnnnnlkjdsaaaaaaaaaaaaaaaaaaaabnclkkkkkkkkkkkkkkkkkkkkkkkkkklllllllllll = 10\n",
    "aaaaaaaaaaaaaaaaaaaaaannnnnnnnnnnnnnnnnnnnnnnnlkjdsaaaaaaaaaaaaaaaaaaaabnclkkkkkkkkkkkkkkkkkkkkkkkkkklllllllllll"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "0d9d493b-8b5c-4d2f-ac5c-9b3f90059bf4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to check variable datatype\n",
    "type(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a087f49-ce41-4ec3-ba10-73d9ea050f8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ----------------------------Python Data Types -------------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41c62c88-e39e-46fc-8cfd-2869b85d4e2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In Python, data types define the kind of value a variable can hold. \n",
    "# str\n",
    "# int\n",
    "# bool\n",
    "# floot\n",
    "# complex\n",
    "# bytes\n",
    "# bytarray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ee50392-8571-4535-b6bf-5f3d24d061c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#--------------------- STR -----------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e44d20af-a315-4d5d-9991-99354a84033e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# String \n",
    "#  String are identified as a contiguous set of characters\n",
    "# we can define string datatype using single '', Double \"\", Tripple \"\" Quotes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "72091c72-d0e7-4907-820d-d29fe5e6a069",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It's alright\n",
      "He is called 'Johnny'\n",
      "He is called \"Johnny\"\n",
      "He is called \"Johnny\",\n",
      "       jony how r u\n"
     ]
    }
   ],
   "source": [
    "print(\"It's alright\")\n",
    "print(\"He is called 'Johnny'\")\n",
    "print('He is called \"Johnny\"')  \n",
    "print('''He is called \"Johnny\",\n",
    "       jony how r u''')          # Tripple single quotes used for add new lines in str"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47b26a7d-7c5d-4c34-a497-cc6f94f39d6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters.\n",
    "#  However, Python does not have a character data type, a single character is simply a string with a length of 1.\n",
    "#  Square brackets can be used to access elements of the string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "6825ab9e-f0da-4e9b-840f-6cb5209da3a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Dnyanes'"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " name = 'Dnyaneshwar Argade'\n",
    "name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "c9947f39-1877-4c00-b889-b109d04ee228",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'D'"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "89e1b012-85e5-452a-99b7-a5b3bf92bb7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Dnyanes'"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[0:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e559f593-1c28-4888-9b78-7e11f4266520",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  strings in Python are immutable, meaning once you create a string, you cannot change its individual characters or modify it in place."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "6ba1e3ce-cd65-4488-88f0-de3034cda3aa",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'str' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[80], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m text \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mHello\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m----> 2\u001b[0m text[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mY\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'str' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "text = \"Hello\"\n",
    "text[0] = \"Y\"  # Trying to change \"H\" to \"Y\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "c8bc1c78-9b00-44a7-b816-d43fae60cd62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Hello'"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_text = text.replace(\"H\", \"Y\")\n",
    "text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "b2acf48a-8adf-4fb0-869a-1264fe2fa75c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Yello'"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a5b9340-0803-476b-97ff-61e2f8f3aafc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since strings are arrays, we can loop through the characters in a string, with a for loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "d0e48526-8198-4858-ae8b-8305abc0fd2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b\n",
      "a\n",
      "n\n",
      "a\n",
      "n\n",
      "a\n"
     ]
    }
   ],
   "source": [
    "for x in \"banana\":\n",
    "  print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "208535c2-4fb2-40bf-ad2d-351ac98e12d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the length of a string, use the len() function.\n",
    "len(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "4e03d20e-3032-4340-aaf4-e325e0492f58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "# check if a certain phrase or character is present in a string, we can use the keyword in.\n",
    "myname = \"My name is Dnyaneshwar\"\n",
    "print(\"Dnyaneshwar\" in myname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f01c29e4-a7a9-4427-be42-246161703d4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use it in an if statement:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "72cede19-45e1-4600-b922-576629eace32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "present\n"
     ]
    }
   ],
   "source": [
    "if \"Dnyaneshwar\" in myname:\n",
    "  print(\"present\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "88c3f0f5-efd7-4616-bf1e-7592226817c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "if \"Dnyaneshwar\" not in myname:\n",
    "  print(\"absent\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93a59195-21d9-44ee-8f8a-9a0d8f4f0289",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bde5b8ca-f0d2-4e12-ae8e-6aaf14a756bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#------------------integer---------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbb112fe-303b-4f40-8d41-0c52f05c48c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Whole numbers, both positive and negative.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "61d15b90-2ff6-483e-b778-19921e02b2dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-3255522"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 1\n",
    "y = 35656222554887711\n",
    "z = -3255522\n",
    "x\n",
    "y\n",
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1cdbe1f9-d4e5-47c0-b9cc-a48b2e805093",
   "metadata": {},
   "outputs": [],
   "source": [
    "#---------------- floot -----------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc2e0a0a-1042-4634-beb7-29dee7d53366",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Float, or \"floating point number\" is a number, positive or negative, containing one or more decimals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "58390c9f-44ca-4c32-a023-459659712c15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15.009"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " floot_a = 15.009\n",
    "floot_a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "4acbe358-bd8c-4cfa-bb11-91793ee47cf7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-15.009"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "floot_b = -15.009\n",
    "floot_b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "6f4c5b02-4d96-4b61-971f-17ea83146bce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000000.0"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  Float can also be scientific numbers with an \"e\" to indicate the power of 10.\n",
    "floot_u = 10e5\n",
    "floot_u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7df3898b-b0c7-4baa-a6f1-f445051fa8e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#----------------------Complex -----------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "6ccb128c-403b-4439-b5b6-0d601742b117",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  The complex data type in Python is used to represent complex numbers, which consist of two parts:\n",
    "#  1] Real part: A regular number, like 3 or -2.\n",
    "#  2] Imaginary part: A number that is multiplied by the imaginary unit j. \n",
    "#        This is something mathematicians use to represent numbers that are the square root of -1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c51eeb61-1ea5-477a-ad09-56d5aecd9681",
   "metadata": {},
   "outputs": [],
   "source": [
    "#   A complex number is written as a + bj where:\n",
    "\n",
    "#   a is the real part (a regular number).\n",
    "#   b is the imaginary part (a number multiplied by j)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "69d32d1c-eb15-415e-ba72-5f4f29e482ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "complex"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "complex_c = 3 + 2j\n",
    "type(complex_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "5388e2b4-4589-4d98-b401-48d9e0ea8197",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3+2j)"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "complex_c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "795356a0-eb67-42c5-8eae-700d368fdafa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#-------------------bool---------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b56c822c-a4a0-4b06-b351-a84ce8595670",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Booleans represent one of two values: True or False."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "5b2ac921-b9d7-4d77-8d4f-5a8fd7fbc475",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bool_a = 5>1\n",
    "bool_a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "e22f1b96-c246-4907-96c9-57db082aa8f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# in blue true = 1 and false = 0\n",
    "bool_b = True + True\n",
    "bool_b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "b2b98842-0586-4d3e-aa1d-a29d16752148",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bool_c = True - True\n",
    "bool_c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cda0154-f22f-4dea-b7b1-997298e7b663",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
