{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9646bc89-cdbc-44cd-9f70-22c6b6ab88c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#-----------------------------------------Tuple------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a4109c6b-11ad-4eac-be77-5569ab2f77aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3, 4, 5, 6, 7, 8, 9)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tuple denote as open bracket ()\n",
    "T = (1,2,3,4,5,6,7,8,9)\n",
    "T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bc276d4f-7f54-4d4f-a487-fefdbfef28ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 20, 'Dnyaneshwar', True)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can assign multiple datatypes in tupple\n",
    "T1 = (1,20,\"Dnyaneshwar\",True)\n",
    "T1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3aa7b3c9-6e66-4fa4-84f4-9b7c1eee442d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 1, 1, 2, 2, 2, 3, 3, 3)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dupplicates allowed in tupple\n",
    "T2 =(1,1,1,2,2,2,3,3,3)\n",
    "T2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e260fd91-1a87-452e-b084-5f2357f909f3",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'tuple' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[34], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Tupple is Immutable [Object cannot change]\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m T2[\u001b[38;5;241m1\u001b[39m]\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m\n\u001b[0;32m      3\u001b[0m T2\n",
      "\u001b[1;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "# Tupple is Immutable [Object cannot change]\n",
    "T2[1]=10\n",
    "T2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a2ec37f8-633f-407c-8ff7-6257461c19b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 20, 30, 40, ['Dnyaneshwar', 'Argade'])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# if tuple include any list in it that list is mutable\n",
    "T3 = (10,20,30,40,[\"Dnyaneshwar\",\"Argade\"])\n",
    "T3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "4b430d41-b66b-4021-963c-f1e57fd9b2e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 20, 30, 40, ['Dnya', 'Argade'])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T3[4][0] =\"Dnya\"     # 4 denote index in tule and 0 for indexing in that list\n",
    "T3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "7926343a-7f4a-4e88-bc0b-c3b8ca441af4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# indexing allowed in tuple \n",
    "T3[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "a47b4ae1-df9e-4ad9-be8c-a31b35919b0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 30, 40)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# slicing allowed in tupple\n",
    "T3[1:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "1bcdcea3-a9eb-4591-b1a1-368531700b8a",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'tuple' object has no attribute 'append'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[65], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# We not add vaule in tupple\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m T3\u001b[38;5;241m.\u001b[39mappend \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mRAJE\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'append'"
     ]
    }
   ],
   "source": [
    "# We not add vaule in tupple append not work\n",
    "T3.append = \"RAJE\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "f606c85d-e6dd-4262-9c29-94871969541d",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'tuple' object has no attribute 'insert'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[69], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# insert not work in tupple \u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m T3\u001b[38;5;241m.\u001b[39minsert(\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m100\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'insert'"
     ]
    }
   ],
   "source": [
    "# insert not work in tupple \n",
    "T3.insert(2,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "32cc86e7-a3bf-4039-ba8b-9e1460eca763",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'tuple' object has no attribute 'append'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[71], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m T3\u001b[38;5;241m.\u001b[39mappend \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mRAJE\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mShivaji\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'append'"
     ]
    }
   ],
   "source": [
    "T3.append = [\"RAJE\",\"Shivaji\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "9a479f53-fc7a-46fe-a052-bc388c314ea3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 200, 300, 400, 500, 600)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# You can concatenate two or more tuples, using the + operator.\n",
    "T4 = (100,200,300)\n",
    "T5 = (400,500,600)\n",
    "T4+T5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "16460474-cfbd-4176-897c-90b86c6ab874",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 200, 300, 100, 200, 300)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# we can repeat tupple using *\n",
    "T4*2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "30c3e917-b1e4-488e-ac4c-aa08e5ce2bb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 200, 300, 100, 200, 300, 100, 200, 300, 100, 200, 300, 100, 200, 300)"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T4*5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "284ae396-72c7-4fc7-874c-28933a396936",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'tuple' object has no attribute 'REMOVE'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[93], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m#REMOVE NOT ALLOWED IN TUPPLE\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m T4\u001b[38;5;241m.\u001b[39mREMOVE(\u001b[38;5;241m200\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'REMOVE'"
     ]
    }
   ],
   "source": [
    "#REMOVE NOT ALLOWED IN TUPPLE\n",
    "T4.REMOVE(200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "14fb3040-a376-4480-ab82-555730ca137b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# WE CAN UNPACK TUPLE ITEM AS VERIABLE \n",
    "T5 =(10,20,30)\n",
    "A,B,C=T5\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "6e849ead-3e20-45f1-956b-d61358e72282",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# WE CAN USE in and not in operators to check if an element exists within a tuple.\n",
    "200 in  T5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "ea1f86a0-cb7b-47e3-b884-63d2fab738ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "200 not in  T5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "ff9fd2ea-1b4d-4593-b53e-bbb0294a6167",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# count,len,index function work in tuple\n",
    "len(T5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "d195178a-1e58-4735-872f-e7f64e24dc37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T5.count(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "fbb4cd88-8503-4ca5-bd0c-b06283396e0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T5.index(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "87ed055d-3228-4f90-8c18-d0201aa00279",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tuple"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# When creating a tuple with only one element, you need to add a trailing comma, otherwise it will be interpreted as a normal variable.\n",
    "T6=(1,)\n",
    "type(T6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "641cdd50-b69e-4306-89af-40b3574b1b92",
   "metadata": {},
   "outputs": [],
   "source": [
    "#     Why Use Tuples?:\n",
    "#    Immutability: This makes tuples useful when you need a fixed collection of elements that should not be altered.\n",
    "#    Faster than Lists: Tuples, being immutable, are faster in comparison to lists, particularly when iterating over large collections of data.\n",
    "#    Can be used as Dictionary Keys: Because tuples are hashable (due to their immutability), they can be used as keys in dictionaries, unlike lists."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee68ff45-1c26-4847-9a7b-5bd4f2ef3324",
   "metadata": {},
   "source": [
    "1. Mutability:\n",
    "Tuple: Immutable, meaning you cannot change, add, or remove elements once the tuple is created.\n",
    "List: Mutable, allowing you to change, add, or remove elements after creation.\n",
    "2. Syntax:\n",
    "Tuple: Defined using parentheses ().\n",
    "List: Defined using square brackets [].\n",
    "3. Use Cases:\n",
    "Tuple: Used for data that should remain constant or fixed, such as coordinates, days of the week, or configuration settings.\n",
    "List: Used for collections of data that may change over time, such as dynamic lists of items, data that needs to be modified, or datasets that can grow or shrink.\n",
    "4. Performance:\n",
    "Tuple: Faster in performance due to immutability. It uses less memory because no extra space is needed for modifications.\n",
    "List: Slightly slower compared to tuples because they need to handle changes dynamically, which requires more memory.\n",
    "5. Memory Usage:\n",
    "Tuple: Requires less memory due to its fixed nature.\n",
    "List: Requires more memory to accommodate modifications like adding or removing elements.\n",
    "6. Methods and Functions:\n",
    "Tuple: Has fewer methods due to its immutability. Key methods include checking occurrences (count) and finding the index of an element (index).\n",
    "List: Has more methods for modification, including adding (append, insert), removing (remove, pop), and sorting elements (sort, reverse).\n",
    "7. Hashability:\n",
    "Tuple: Can be used as a key in dictionaries because it is hashable (i.e., immutable).\n",
    "List: Cannot be used as a dictionary key because it is mutable and, thus, not hashable.\n",
    "8. Typical Usage:\n",
    "Tuple: Suitable for storing fixed, unchangeable data like dates, coordinates, or constants.\n",
    "List: Ideal for managing dynamic data that is expected to change frequently, like a to-do list or a collection of user inputs.\n",
    "9. Packing and Unpacking:\n",
    "Tuple: Commonly used for packing and unpacking multiple values because it is fixed and reliable.\n",
    "List: Can also be used for packing and unpacking, but it's less common than tuples for this purpose.\n",
    "Summary:\n",
    "Tuples are used when data should remain constant and cannot be modified.\n",
    "Lists are used when you need a flexible, dynamic collection that may change over time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a26762c-1032-47bd-a4be-ba2a7a1fdfd5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f4ae515-9d2f-4bca-9288-c9b8c241a493",
   "metadata": {},
   "outputs": [],
   "source": [
    "#------------------------------- Range --------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "098a3bc6-8042-4a8f-b36e-40f9600fb870",
   "metadata": {},
   "outputs": [],
   "source": [
    "# the range() function generates a sequence of numbers and is commonly used for looping a specific number of times in for loops."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "453358e6-99cb-4011-bde5-3ef97dab29ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "# The range() function can take one to three arguments: (start,stop,steps)\n",
    "for r in range(1, 10 , 1):    #range() is a built-in function to generate a sequence of numbers.\n",
    "    print(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "e89ac4ec-5d95-4af1-a98f-ec797fc174e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "11\n",
      "21\n",
      "31\n",
      "41\n",
      "51\n",
      "61\n",
      "71\n",
      "81\n",
      "91\n"
     ]
    }
   ],
   "source": [
    "for r in range(1, 100 , 10):\n",
    "    print(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "d370f70e-1776-4a7a-8731-9ce1038f4460",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "4\n",
      "7\n",
      "10\n",
      "13\n",
      "16\n",
      "19\n"
     ]
    }
   ],
   "source": [
    "for r in range(1, 20 , 3):\n",
    "    print(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "bb549448-095c-4146-9db7-b7ec1bf30b96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "for r in range(10):\n",
    "    print(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "97e84b03-60a6-45a7-b90f-e5b65b18ef19",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "range expected at least 1 argument, got 0",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[177], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m r \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m():\n\u001b[0;32m      2\u001b[0m     \u001b[38;5;28mprint\u001b[39m(r)\n",
      "\u001b[1;31mTypeError\u001b[0m: range expected at least 1 argument, got 0"
     ]
    }
   ],
   "source": [
    "for r in range():\n",
    "    print(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "e65d8517-bb76-4712-8233-f1d1e3a6bbd9",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'str' object cannot be interpreted as an integer",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[183], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m r \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124ma\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mz\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[0;32m      2\u001b[0m     \u001b[38;5;28mprint\u001b[39m(r)\n",
      "\u001b[1;31mTypeError\u001b[0m: 'str' object cannot be interpreted as an integer"
     ]
    }
   ],
   "source": [
    "for r in range(\"a\",\"z\"):   #you cannot directly define a range for characters like a to z using the range()\n",
    "    print(r) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "149c14ec-b387-4970-a205-8bcaacf4916c",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'str' object cannot be interpreted as an integer",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[186], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m r \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124ma\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mz\u001b[39m\u001b[38;5;124m\"\u001b[39m):   \u001b[38;5;66;03m#you cannot directly define a range for characters like a to z using the range()\u001b[39;00m\n\u001b[0;32m      2\u001b[0m     \u001b[38;5;28mprint\u001b[39m(r)\n",
      "\u001b[1;31mTypeError\u001b[0m: 'str' object cannot be interpreted as an integer"
     ]
    }
   ],
   "source": [
    "for r in range(\"a\",\"z\"):   #you cannot directly define a range for characters like a to z using the range()\n",
    "    print(r) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c801a373-bade-4b9a-9727-690b4c6857f8",
   "metadata": {},
   "source": [
    "range charastiristics\n",
    "Immutable: The sequence generated by range() is immutable, meaning it cannot be modified.\n",
    "Lazy Evaluation: range() doesn’t generate the numbers all at once but creates them one by one as needed. This makes it memory efficient, especially for large ranges.\n",
    "Exclusive End: The stop value is not included in the range. The sequence always stops at stop - 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aca9f973-b7ca-426f-9164-308ab2708e7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#--------------------------set--------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "0cc71671-37b0-4d72-8e60-ac2a9b3fc364",
   "metadata": {},
   "outputs": [],
   "source": [
    "#   In Python, a set is an unordered collection of unique elements. \n",
    "#   It is useful when you need to store distinct items and eliminate duplicates. Sets are defined using curly braces {} or the set() function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "14e07380-69aa-4acd-985b-8a369de6f932",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Creating set\n",
    "# 1 Set denote as curly brasis {}\n",
    "S = {1,2,3,4}\n",
    "# 2 using set function \n",
    "S5 = set([1,2,3,4,5,6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "7c195377-2173-4528-bcb1-f733dac7ce88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4}"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "fa4b7fd9-9726-4829-b2a4-a41ea5233170",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 5, 6}"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "S5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "7b7c815b-739f-4409-8f0f-33fd1dadefd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4}"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# duplicate are not allowed in set\n",
    "S2 = {1,1,1,2,3,4}\n",
    "S2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "c4cf2159-2d22-423f-a7b8-222ea7e3ef28",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'set' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[198], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# index not allowed in set\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m S2[\u001b[38;5;241m2\u001b[39m]\n",
      "\u001b[1;31mTypeError\u001b[0m: 'set' object is not subscriptable"
     ]
    }
   ],
   "source": [
    "# index not allowed in set\n",
    "S2[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "ef66a271-3ba5-4728-ab76-0419ff04cc68",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'set' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[200], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m#slicing not allowed in set\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m S2[\u001b[38;5;241m0\u001b[39m:\u001b[38;5;241m4\u001b[39m]\n",
      "\u001b[1;31mTypeError\u001b[0m: 'set' object is not subscriptable"
     ]
    }
   ],
   "source": [
    "#slicing not allowed in set\n",
    "S2[0:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "74e4bf77-c743-413d-99e2-1de92e5d95b7",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'set' object has no attribute 'append'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[202], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# append not allowed in set\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m S2\u001b[38;5;241m.\u001b[39mappend(\u001b[38;5;241m7\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'set' object has no attribute 'append'"
     ]
    }
   ],
   "source": [
    "# append not allowed in set\n",
    "S2.append(7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "923d99ac-94bf-4725-960a-20ffbca170fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# set in Immutable add append not allowed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "0f46e2c5-10e0-4ea4-bbe1-5bb8744f7c90",
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove allowed in set \n",
    "S2.remove(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "46b13c6d-46cf-4ff9-b690-10a7f46fb788",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{2, 3, 4}"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "S2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a042791-555d-4d93-ae2f-52c1d2871c98",
   "metadata": {},
   "outputs": [],
   "source": [
    "# but if you create frozenset Remove also not allowed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "a0d2d0e9-bcfc-4c92-a4be-e06a1629e39e",
   "metadata": {},
   "outputs": [],
   "source": [
    "S_frooz = frozenset(S2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "c1cdd7d6-f8ef-48ec-8249-8c0ee736d691",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'frozenset' object has no attribute 'remove'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[220], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m S_frooz\u001b[38;5;241m.\u001b[39mremove(\u001b[38;5;241m2\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'frozenset' object has no attribute 'remove'"
     ]
    }
   ],
   "source": [
    "S_frooz.remove(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "5f45a733-c136-41d1-b94f-819e4ca52926",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "frozenset"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# type of frozenset is frozenset \n",
    "type(S_frooz)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61d19ca0-252e-4a81-b08f-716acc32882f",
   "metadata": {},
   "outputs": [],
   "source": [
    "-"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "9463ae23-a5c1-4873-a8eb-8b40f331d596",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{3, 4, 10}"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use add() to add a single element to the set.\n",
    "S2.add(10)\n",
    "S2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f263fa5d-5cac-4a06-a4c7-75b173c39177",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use remove() or discard() to remove an element. The difference is that remove() raises an error if the element is not found, while discard() does not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "c10c6e52-edde-4237-84b0-047abcbd6a02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{3, 4}"
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "S2.remove(10)\n",
    "S2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "id": "eeb28310-02d0-424f-b3f6-961d39a3ddb9",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "10",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[251], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m S2\u001b[38;5;241m.\u001b[39mremove(\u001b[38;5;241m10\u001b[39m)\n\u001b[0;32m      2\u001b[0m S2\n",
      "\u001b[1;31mKeyError\u001b[0m: 10"
     ]
    }
   ],
   "source": [
    "S2.remove(10)\n",
    "S2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "id": "0046ec6a-174b-4dd3-b0f9-d5227bc42a95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{3, 4}"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "S2.discard(10)\n",
    "S2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac727fdd-4bf1-4b12-a072-74a0be9e1f9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Union: Combines two  sets.( give unique values  linke union in sql)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "id": "ac77031b-daef-43cb-a48c-a78dc06ada65",
   "metadata": {},
   "outputs": [],
   "source": [
    "s6 = {1,2,3,4,5,6}\n",
    "s7 ={1,2,3,4,5,6,7,8,9}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "id": "3c72f9d3-d626-4c41-a144-7ab71c3b3b01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 5, 6, 7, 8, 9}"
      ]
     },
     "execution_count": 259,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "S6_7 = s6.union(s7)\n",
    "S6_7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac8b788f-4b31-4d3b-b437-c84b2c38f987",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Intersection: Returns elements that are present in both sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "id": "7a87ee2a-5e1a-4116-960a-95a4a37c93e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "S6_7 = s6.intersection(s7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c833f263-1d00-4a3c-91d3-e200529d740b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#    Use the in keyword to check if an element exists in the set.                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "id": "0b7822f1-dee5-4d26-898d-8b61c66a461d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 267,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2 in S6_7\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "id": "3ec59f4b-7c4c-43e8-95cb-71fcdf1338e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#------------------------------ Dictionary --------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d7e3499-61db-48f3-9f89-f86bbeb7150d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In Python, a dictionary is an unordered collection of items stored as key-value pairs.\n",
    "# It allows you to store data in a way that enables quick lookups and is very useful for organizing complex data structures."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f91c506e-1077-428a-bf36-85b33c5db376",
   "metadata": {},
   "source": [
    "Unordered: The items stored in a dictionary do not have a defined order.\n",
    "Mutable: You can change the contents of a dictionary (add, remove, or modify items).\n",
    "Key-Value Pairs: Each item consists of a key and its corresponding value. Keys must be unique and immutable (e.g., strings, numbers, or tuples), while values can be of any data type.\n",
    "Dynamic Size: Dictionaries can grow and shrink as you add or remove items."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "id": "75ca80a1-2a0f-4d0e-878c-689ec6e3e876",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create dictionaru - use curly brackets{}\n",
    "Dict = { 1:\"Apple\",\n",
    "         2:\"orange\",\n",
    "        3:\"BANANA\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "id": "ea4d4e4e-2894-407d-a1b2-9d1ddcbb646b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'Apple', 2: 'orange', 3: 'BANANA'}"
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "id": "b4e48d8a-60f1-428b-b865-cc6c5273a2a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# with curly bracket u can create emplty dictionary\n",
    "d ={}\n",
    "type(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "id": "73d763eb-8d3c-4068-906b-27d7e697be16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# to create empty set you need to use set () functoin "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "id": "ccf33b5e-f22d-4be0-98d2-ff1a54186758",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set()"
      ]
     },
     "execution_count": 289,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d2= set()\n",
    "d2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "id": "a70c346f-c96f-498b-bdb0-e3752b630207",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set"
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(d2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "id": "118d1155-ef2b-4a1f-87d0-2a3f2556d94b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'Apple', 2: 'orange', 3: 'BANANA', 4: 'pineaoole'}"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# To add value in dictionary you need to add key and values\n",
    "Dict[4]=\"pineaoole\"\n",
    "Dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "id": "8ffe6ddd-445a-44e5-bd49-dffda28c32d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove akkowed in dict.\n",
    "del Dict[4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "d848355f-947c-44ef-99dd-83408d28cf1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'Apple', 2: 'orange', 3: 'BANANA'}"
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "901833b2-dded-4527-9a9b-35fa1eeb11d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'BANANA'"
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use pop() to remove an item and return its value.  its remove value and show which value is removed\n",
    "Dict.pop(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "417a24a6-b51c-4228-9b82-3affd6728984",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'Apple', 2: 'orange'}"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "id": "52f636e2-eee9-41a8-a480-f655ad683493",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "if \"Apple\" in Dict:\n",
    "    print(key)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "id": "3bb5c860-442a-4048-ac78-f1ebe41095d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'Apple', 2: 'orange'}"
      ]
     },
     "execution_count": 376,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Dict"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52a56121-bc50-42a2-9a62-d4b4a111ef67",
   "metadata": {},
   "source": [
    "Dictionaries are powerful data structures for storing and organizing data in key-value pairs.\n",
    "They are mutable and allow for dynamic resizing.\n",
    "The unique keys enable quick lookups, making dictionaries a great choice for many programming tasks where association between a unique key and a value is needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d77d33ee-1077-49d2-9d4e-254c4d2b1e75",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d34a72b-9d86-47cd-82be-9adaab9389df",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5223d964-712d-4525-9c3c-1e8293e5b672",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a107fcd-09d3-4585-8244-26e78ffdab85",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30decfaf-fa85-48ac-ba65-4bed4c5a45a8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "456c11a2-3502-4168-be2d-64db1aed5710",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
